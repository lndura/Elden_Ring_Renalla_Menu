<AssemblerScript><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<CheatTable>
  <CheatEntries>
    <CheatEntry>
      <ID>1987669263</ID>
      <Description>"Respec Menu"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{  By Indura
   3-7-2024 ; 02:21

   Script to easily change stats while being validated.
   Very rough around the edges.
   Facedata AOB is wrong address
   Can't get manual param scaling to work either.
}
{$lua}
if syntaxcheck then return end
[ENABLE]
if readInteger("[[[[[WorldChrMan]+10EF8]+0]+190]+0]+138") == nil then
   return error("No Character Loaded.")
end

local charAddr = {
   "[[GameDataMan]+8]+9C","[[GameDataMan]+8]+BF","[[GameDataMan]+8]+E2",
   "[[GameDataMan]+8]+C2","[[GameDataMan]+8]+BE","[[GameDataMan]+8]+3C",
   "[[GameDataMan]+8]+68",--"[[GameDataMan]+8]+754",
}

local build = {
   meme = memrec,
   ctrl = {},
   curr = {
      [1] = readString(charAddr[1],48,true),
      [2] = readByte(charAddr[2]),
      [3] = readByte(charAddr[3]),
      [4] = readByte(charAddr[4]),
      [5] = readByte(charAddr[5]),
      stats = {},
      fData = nil--readBytes(charAddr[8],264,true),
   },
   arch = {
      [2] = {
         [0] = "Vagabond",
         [1] = "Warrior",
         [2] = "Hero",
         [3] = "Bandit",
         [4] = "Astrologer",
         [5] = "Prophet",
         [6] = "Confessor",
         [7] = "Samurai",
         [8] = "Prisoner",
         [9] = "Wretch",
      },
      [3] = {
         [0] = "+0 | +0",
         [1] = "+1 | +0",
         [2] = "+2 | +1",
         [3] = "+3 | +1",
         [4] = "+4 | +1",
         [5] = "+5 | +2",
         [6] = "+6 | +2",
         [7] = "+7 | +3",
         [8] = "+8 | +3",
         [9] = "+9 | +3",
         [10] = "+10 | +4",
         [11] = "+11 | +4",
         [12] = "+12 | +5",
         [13] = "+13 | +5",
         [14] = "+14 | +5",
         [15] = "+15 | +6",
         [16] = "+16 | +6",
         [17] = "+17 | +7",
         [18] = "+18 | +7",
         [19] = "+19 | +7",
         [20] = "+20 | +8",
         [21] = "+21 | +8",
         [22] = "+22 | +9",
         [23] = "+23 | +9",
         [24] = "+24 | +9",
         [25] = "+25 | +10",
      },
      [4] = {
         [0] = "Young Voice 1",
         [1] = "Young Voice 2",
         [2] = "Mature Voice 1",
         [3] = "Mature Voice 2",
         [4] = "Aged Voice 1",
         [5] = "Aged Voice 2",
      },
      [5] = {
         [0] = "Type B",
         [1] = "Type A",
      },
      stats = {
         [0] = {15, 10, 11, 14, 13, 9,  9,  7 },
         [1] = {11, 12, 11, 10, 16, 10, 8,  9 },
         [2] = {14, 9,  12, 16, 9,  7,  8,  11},
         [3] = {10, 11, 10, 9,  13, 9,  8,  14},
         [4] = {9,  15, 9,  8,  12, 16, 7,  9 },
         [5] = {11, 14, 8,  11, 10, 7,  16, 10},
         [6] = {10, 13, 10, 12, 12, 9,  14, 9 },
         [7] = {12, 11, 13, 12, 15, 9,  8,  8 },
         [8] = {11, 12, 11, 11, 14, 14, 6,  9 },
         [9] = {10, 10, 10, 10, 10, 10, 10, 10},
      },
      statDescs = {
         "Vigor",
         "Attunement",
         "Endurance",
         "Strength",
         "Dexterity",
         "Intelligence",
         "Faith",
         "Arcane",
      }
   },
}

writeInteger("[GameMan]+B80",0)
for i=1,8,1 do
   local statAddr = getAddress(charAddr[6]) + (i-1)*0x4
   build.curr.stats[i] = readInteger(statAddr, stat)
end

local function getHP(value)
   local scaling = 0
   if value &lt;= 1 then
      scaling = 0
   elseif value &lt; 25 then
      scaling = math.pow((value - 1) / 24, 1.5) * 500 + 300
   elseif value &lt; 40 then
      scaling = math.pow((value - 25) / 15, 1.1) * 650 + 800
   elseif value &lt; 60 then
      scaling = (1 - math.pow(1 - (value - 40) / 20, 1.2)) * 450 + 1450
   elseif value &lt; 99 then
      scaling = (1 - math.pow(1 - (value - 60) / 39, 1.2)) * 200 + 1900
   elseif value &gt;= 99 then
      scaling = 2100
   else
      scaling = 0
   end
   return math.floor(scaling)
end

local function getFP(value)
   local scaling = 0
   if value &lt;= 1 then
      scaling = 40
   elseif value &lt; 15 then
      scaling = ((value - 1) / 14) * 45 + 50
   elseif value &lt; 35 then
      scaling = ((value - 15) / 20) * 105 + 95
   elseif value &lt; 60 then
      scaling = (1 - math.pow(1 - (value - 35) / 25, 1.2)) * 150 + 200
   elseif value &lt; 99 then
      scaling = ((value - 60) / 39) * 100 + 350
   elseif value &gt;= 99 then
      scaling = 450
   else
      scaling = 0
   end
   return math.floor(scaling)
end

local function getSP(value) -- Get Stamina Total
   local scaling = 0
   if value &lt;= 1 then
      scaling = 0
   elseif value &lt; 15 then
      scaling = string.format('%-5d', math.floor(((value - 1) / 14) * 25 + 80))
   elseif value &lt; 30 then
      scaling = string.format('%-5d', math.floor(((value - 15) / 15) * 25 + 105))
   elseif value &lt; 50 then
      scaling = string.format('%-5d', math.floor(((value - 30) / 20) * 25 + 130))
   elseif value &lt; 99 then
      scaling = string.format('%-5d', math.floor(((value - 50) / 49) * 15 + 155))
   elseif value &gt;= 99 then
      scaling = 170
   end
   return math.floor(scaling)
end

local function getEQ(value) -- Get Equip Load
   local scaling = 0
   if value &lt;= 1 then
      scaling = 0
   elseif value &lt; 8 then
      scaling = string.format('%.1f', ((value - 1) / 7) * 0 + 45)
   elseif value &lt; 25 then
      scaling = string.format('%.1f', ((value - 8) / 17) * 27 + 45)
   elseif value &lt; 60 then
      scaling = string.format('%.1f', math.pow((value - 25) / 35, 1.1) * 48 + 72)
   elseif value &lt; 99 then
      scaling = string.format('%.1f', ((value - 60) / 39) * 40 + 120)
   elseif value &gt;= 99 then
      scaling = 160.0
   end
   return math.floor(scaling)
end

local function getPicture()
   local url = 'https://raw.githubusercontent.com/lndura/Elden_Ring_Renalla_Menu/main/respec_background.png'
   local http = getInternet()
   local file = http.getURL(url)
   if file == nil then
      local text = string.format("Rennala's respec image cannot be loaded.\nThe script will still work normally.\n\nDo you wish to proceed?")
      local check = messageDialog("Error occurred",text, mtConfirmation, mbYes, mbNo)
      if check ~= mrYes then
         autoDisable(memrec)
      end
      return nil
   end
   http.destroy()
   local picture = createPicture()
   local stream = createStringStream(file)
   picture.loadFromStream(stream)
   return picture
end

local function getTable(t, indent)
   local file = "{\n"
   local indent = indent or "  "
   local innerIndent = indent .. "  "
   for k, v in pairs(t) do
      if k ~= "fData" then
         file = file .. innerIndent
         if type(k) == "number" then
            file = file .. "[" .. k .. "]"
         else
            file = file .. k
         end
         file = file .. " = "
         if type(v) == "table" then
            file = file .. getTable(v, innerIndent)
         elseif type(v) == "string" then
            file = file .. "\"" .. v .. "\""
         else
            file = file .. tostring(v)
         end
      file = file .. ",\n"
      end
   end
   return file .. indent .. "}"
end

local function validateInput(data)
   local expectedStructure = {[1] = "string",[2] = "number",[3] = "number",[4] = "number",[5] = "number",stats = "table"}
   for key, expectedType in pairs(expectedStructure) do
      if type(data[key]) ~= expectedType then
         return false
      end
   end
   if type(data.stats) ~= "table" or #data.stats ~= 8 then
      return false
   end
   for _, value in ipairs(data.stats) do
      if type(value) ~= "number" then
         return false
      end
   end
   return true
end

local function cycle(arg, min, max)
   if arg &lt; min then
      return max
   elseif arg &gt; max then
      return min
   end
   return arg
end

local function inbound(arg, min, max)
   if arg &lt; min then
      return min
   elseif arg &gt; max then
      return max
   end
   return arg
end

local function getIndex(array, description)
   local safe = string.lower(description)
   for i,key in ipairs(array) do
      if string.find(string.lower(key),safe,1,true) then
         return i
      end
   end
   return nil
end

local function calculateLevel(stats)
   local level = -79
   for _,stat in ipairs(stats) do
      level = level + stat
   end
   return level
end

function build:settings(form, properties)
   if type(form) == "string" then
      form = self.ctrl[form]
   end
   for key,property in pairs(properties) do
      if type(property) == "table" then
         for subKey,subProperty in pairs(property) do
            form[key][subKey] = subProperty
         end
      else
       	 form[key] = property
      end
   end
end

function build:groupBox(parent, key, properties)
   if type(parent) == "string" then
      parent = self.ctrl[parent]
   end
   self.ctrl[key] = createGroupBox(parent)
   self.ctrl[key].BorderStyle = bsDialog
   self:settings(self.ctrl[key], properties)
end

function build:button(parent, key, properties)
   if type(parent) == "string" then
      parent = self.ctrl[parent]
   end
   self.ctrl[key] = createButton(parent)
   self.ctrl[key].BorderStyle = bsDialog
   self:settings(self.ctrl[key], properties)
end

function build:text(parent, key, properties)
   if type(parent) == "string" then
      parent = self.ctrl[parent]
   end
   self.ctrl[key] = createLabel(parent)
   self:settings(self.ctrl[key], properties)
end

function build:hookImage(parent, key, offset)
   if type(parent) == "string" then
      parent = self.ctrl[parent]
   end
   local picture = getPicture()
   self.ctrl[key] = createImage(parent)
   self.ctrl[key].setPicture(picture)
   self.ctrl[key].Stretch = true
   self.ctrl[key].Left = offset
   self.ctrl[key].Width = parent.Width - offset
   self.ctrl[key].Height = parent.Height
end

function build:init(parent, properties)
   self.ctrl[parent] = createForm(false)
   self.ctrl[parent].BorderStyle = bsDialog
   self.ctrl[parent].OnClose = function(sender)
  	  disableMemrec(self.meme)
      return caFree
   end
   self:settings(parent, properties)
   self:hookImage(parent, "Background", 270)
   self.ctrl[parent].Show()
   local update = createTimer(panelFromExtraMemRecInfo)
   update.Interval = 100
   update.OnTimer = function()
      if not self.meme.Active then
         self.ctrl[parent].destroy()
         update.destroy()
      end
      if build.ctrl["classChange"] ~= build.curr[2] then
         local class = build.curr[2]
         build.ctrl["classChange"] = class
         for i=1,8,1 do
            local new = inbound(build.curr.stats[i], build.arch.stats[class][i],99)
            build.ctrl["Char_Mid_"..i].Caption = new
            build.curr.stats[i] = new
         end
      end
      build.ctrl["RLV"].Caption = calculateLevel(build.curr.stats)
      build.ctrl["HPV"].Caption = getHP(build.curr.stats[1])
      build.ctrl["FPV"].Caption = getFP(build.curr.stats[2])
      build.ctrl["SPV"].Caption = getSP(build.curr.stats[3])
      build.ctrl["EQV"].Caption = getEQ(build.curr.stats[3])
   end
end

build.ctrl["classChange"] = build.curr[2]
build:init("Main",{Width = 1090,Height = 590, Caption = "Respec Menu", Color = 0x6d4424})
build:text("Main", "RL",{Caption = "Level: ", Font = {Size = 14}, Left = 280, Top = 5})
build:text("Main", "HP",{Caption = "Health: ", Font = {Size = 14}, Left = 280, Top = 26})
build:text("Main", "SP",{Caption = "Focus: ", Font = {Size = 14}, Left = 280, Top = 47})
build:text("Main", "FP",{Caption = "Stamina: ", Font = {Size = 14}, Left = 280, Top = 68})
build:text("Main", "EQ",{Caption = "Weight: ", Font = {Size = 14}, Left = 280, Top = 89})
build:text("Main", "RLV",{Caption = calculateLevel(build.curr.stats), Font = {Size = 15}, Left = 370, Top = 5})
build:text("Main", "HPV",{Caption = getHP(build.curr.stats[1]), Font = {Size = 14}, Left = 370, Top = 26})
build:text("Main", "FPV",{Caption = getFP(build.curr.stats[2]), Font = {Size = 14}, Left = 370, Top = 47})
build:text("Main", "SPV",{Caption = getSP(build.curr.stats[3]), Font = {Size = 14}, Left = 370, Top = 68})
build:text("Main", "EQV",{Caption = getEQ(build.curr.stats[3]), Font = {Size = 14}, Left = 370, Top = 89})

build:groupBox("Main", "Archetype", {Caption = "Character Settings", Width = 250, Height = 185, Left = 10, Top = 5})
build:button("Archetype", "Arch_Mid_1", {Caption = build.curr[1],Width = 225,Height = 30, Left = 10, Top = 5, OnClick = function()
   local new = inputQuery("","Write your new name, \nit will be automatically adjusted to be valid.", build.ctrl["Arch_Mid_1"].Caption)
   if new ~= nil and string.gsub(new," ", "") ~= "" then
      local name = string.sub(new,1,16)
      build.ctrl["Arch_Mid_1"].Caption = name
      build.curr[1] = name
   end
end})

for i=2,5,1 do
   local topOffset = 5 + (i-1)*30
   local index = build.curr[i]
   local value = build.arch[i][index]
   build:button("Archetype", "Arch_Mid_"..i, {Caption = value,Width = 165,Height = 30,Left = 40, Top = topOffset, OnClick = function()
      local qer = inputQuery("You can input either index or name.","",build.ctrl["Arch_Mid_"..i].Caption)
      local new = build.curr[i]
      if qer == "" then
      elseif tonumber(qer) ~= nil then
         new = cycle(tonumber(qer),0,#build.arch[i])
      elseif getIndex(build.arch[i],qer) ~= nil then
         new = getIndex(build.arch[i],qer)
      end
      build.ctrl["Arch_Mid_"..i].Caption = build.arch[i][new]
      build.curr[i] = new
   end})

   build:button("Archetype", "Arch_Sub_"..i, {Caption = "&lt;", Width = 30, Height = 30, Left = 10, Top = topOffset, OnClick = function()
      local index = build.curr[i]
      local diff = -1 + index
      local new = cycle(diff,0,#build.arch[i])
      build.ctrl["Arch_Mid_"..i].Caption = build.arch[i][new]
      build.curr[i] = new
   end})

   build:button("Archetype", "Arch_Add_"..i, {Caption = "&gt;", Width = 30, Height = 30,Left = 205, Top = topOffset, OnClick = function()
      local index = build.curr[i]
      local diff = 1 + index
      local new = cycle(diff,0,#build.arch[i])
      build.ctrl["Arch_Mid_"..i].Caption = build.arch[i][new]
      build.curr[i] = new
   end})
end

build:groupBox("Main", "Character", {Caption = "Character Stats", Width = 250, Height = 235, Left = 10, Top = 195})
for i=1,8,1 do
   local topOffset = 5 + (i-1)*25
   local value = build.curr.stats[i]
   build:text("Character", "Char_Desc_"..i, {Caption = build.arch.statDescs[i], Font = {Size = 13}, Left = 15, Top = topOffset})

   build:button("Character", "Char_Mid_"..i, {Caption = value,Width = 50,Height = 25, Left = 160, Top = topOffset, OnClick = function()
      local diff = tonumber(inputQuery("Change Stat","",build.ctrl["Char_Mid_"..i].Caption))
      if diff ~= nil then
         local class = build.curr[2]
         local index = build.curr.stats[i]
         local new = inbound(diff, build.arch.stats[class][i],99)
         build.ctrl["Char_Mid_"..i].Caption = new
         build.curr.stats[i] = new
      end
   end})

   build:button("Character", "Char_Sub_"..i, {Caption = "&lt;", Width = 25, Height = 25, Left = 135, Top = topOffset, OnClick = function()
      local class = build.curr[2]
      local index = build.curr.stats[i]
      local diff = -1 + index
      local new = cycle(diff, build.arch.stats[class][i],99)
      build.ctrl["Char_Mid_"..i].Caption = new
      build.curr.stats[i] = new
   end})

   build:button("Character", "Char_Add_"..i, {Caption = "&gt;", Width = 25, Height = 25, Left = 210, Top = topOffset, OnClick = function()
      local class = build.curr[2]
      local index = build.curr.stats[i]
      local diff = 1 + index
      local new = cycle(diff, build.arch.stats[class][i],99)
      build.ctrl["Char_Mid_"..i].Caption = new
      build.curr.stats[i] = new
   end})
end

build:groupBox("Main", "Facedata", {Caption = "Face data", Width = 250, Height = 70, Left = 10, Top = 435})

build:button("Facedata", "getFacedata", {Caption = "Copy Facedata", Width = 113, Height = 35, Left = 10, Top = 5, OnClick = function()
   local e = string.format("FaceData AOB is incorrect\nThis function will be updated soon.")
   showMessage(e)
   --[[
   local aob = ""
   for _,byte in ipairs(build.curr.fData) do
      aob = string.format("%s %02X",aob,byte)
   end
   aob = string.sub(aob,2)
   print(aob)
   writeToClipboard(aob)
   --]]
end})

build:button("Facedata", "gibFacedata", {Caption = "Upload Facedata", Width = 113, Height = 35, Left = 123, Top = 5, OnClick = function()
   local e = string.format("FaceData AOB is incorrect\nThis function will be updated soon.")
   showMessage(e)
   --[[
   local aob = ""
   for _,byte in ipairs(build.curr.fData) do
      aob = string.format("%s %02X",aob,byte)
   end
   aob = string.sub(aob,2)
   local new = inputQuery("Upload FaceData","Import FaceData AOB from Emillia's website.",aob)
   if new ~= nil and #new == 791 then
      build.curr.fData = nil
      build.curr.fData = {}
      local bytes = {}
      for byte in new:gmatch("%S+") do
         table.insert(build.curr.fData, tonumber(byte, 16))
      end
   end
   --]]
end})

build:groupBox("Main", "Builddata", {Caption = "Build data", Width = 250, Height = 70, Left = 10, Top = 510})

build:button("Builddata", "getBuilddata", {Caption = "Copy Builddata", Width = 113, Height = 35, Left = 10, Top = 5, OnClick = function()
   local data = getTable(build.curr)
   print(data)
   writeToClipboard(data)
end})

build:button("Builddata", "gibBuilddata", {Caption = "Upload Builddata", Width = 113, Height = 35, Left = 123, Top = 5, OnClick = function()
   local new = inputQuery("Upload Build File","Paste Build File Here:","")
   if new ~= nil and string.gsub(new," ", "") ~= "" then
      local data = load("return " .. new)
      local array = data()
      if type(array) == 'table' and validateInput(array) then
         local face = build.curr.fData
         build.curr = nil
         build.curr = array
         build.curr.fData = face
         local class = build.curr[2]
         build.ctrl["classChange"] = class
         for i=1,8,1 do
            local new = inbound(build.curr.stats[i], build.arch.stats[class][i],99)
            build.ctrl["Char_Mid_"..i].Caption = new
            build.curr.stats[i] = new
         end
      end
   end
end})

build:button("Main", "Respec", {Caption = "Respec", Width = 130 , Height = 40, Left = 635, Top = 235, font = {Size = 13}, OnClick = function()
   local name = wideStringToByteTable(build.curr[1])
   table.insert(name,0x0)
   table.insert(name,0x0)
   writeBytes(charAddr[1],name)
   for i=2,5,1 do
      writeByte(charAddr[i], build.curr[i])
   end
   for i,stat in ipairs(build.curr.stats) do
      local statAddr = getAddress(charAddr[6]) + (i-1)*0x4
      writeInteger(statAddr, stat)
   end
   local level = calculateLevel(build.curr.stats)
   writeInteger(charAddr[7],level)
   --writeBytes(charAddr[8],build.curr.fData)
   writeInteger("[GameMan]+B80",0)
   writeByte("[GameMan]+B72",1)
   autoDisable(memrec)
end})

[disable]
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
</CheatTable>]]></AssemblerScript>
